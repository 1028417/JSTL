  test.cpp
d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1650): warning C4244: “参数”: 从“float”转换到“int”，可能丢失数据
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1689): note: 参见对正在编译的 类 模板 实例化 "std::_Is_callable2<false,true,_Rx,_Fx,const int &,const int &>" 的引用
          with
          [
              _Rx=int,
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a> &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(288): note: 参见对正在编译的 类 模板 实例化 "std::_Is_callable1<void,_Ret,_Fx,const int &,const int &>" 的引用
          with
          [
              _Ret=int,
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a> &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(489): note: 参见对正在编译的 别名 模板 实例化 "_Enable_if_callable_t<main::<lambda_687776a6469914e88d18097be6c1ee5a>&>" 的引用
d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1569): warning C4244: “return”: 从“float”转换到“int”，可能丢失数据
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(211): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoker_ret<_Rx,false>::_Call<_Callable&,const int&,const int&>(_Callable &,const int &,const int &)”的引用
          with
          [
              _Rx=int,
              _Callable=_Decayed
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(211): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoker_ret<_Rx,false>::_Call<_Callable&,const int&,const int&>(_Callable &,const int &,const int &)”的引用
          with
          [
              _Rx=int,
              _Callable=_Decayed
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(210): note: 编译 类 模板 成员函数 "int std::_Func_impl<_Decayed,_Alloc,_Ret,const int &,const int &>::_Do_call(const int &,const int &)" 时
          with
          [
              _Alloc=std::allocator<int>,
              _Ret=int
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(136): note: 参见对正在编译的 类 模板 实例化 "std::_Func_impl<_Decayed,_Alloc,_Ret,const int &,const int &>" 的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ret=int
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(343): note: 参见对正在编译的 类 模板 实例化 "std::_Is_large<_Myimpl>" 的引用
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(322): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,const int &,const int &>::_Reset_alloc<_Ty,std::allocator<_Kty>>(_Fx &&,const _Alloc &)”的引用
          with
          [
              _Ret=int,
              _Ty=main::<lambda_687776a6469914e88d18097be6c1ee5a>,
              _Kty=int,
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>,
              _Alloc=std::allocator<int>
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(322): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,const int &,const int &>::_Reset_alloc<_Ty,std::allocator<_Kty>>(_Fx &&,const _Alloc &)”的引用
          with
          [
              _Ret=int,
              _Ty=main::<lambda_687776a6469914e88d18097be6c1ee5a>,
              _Kty=int,
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>,
              _Alloc=std::allocator<int>
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(492): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,const int &,const int &>::_Reset<main::<lambda_687776a6469914e88d18097be6c1ee5a>>(_Fx &&)”的引用
          with
          [
              _Ret=int,
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(492): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,const int &,const int &>::_Reset<main::<lambda_687776a6469914e88d18097be6c1ee5a>>(_Fx &&)”的引用
          with
          [
              _Ret=int,
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>
          ]
  d:\dev\c++\jstl\test.cpp(125): note: 参见对正在编译的函数 模板 实例化“std::function<int (const int &,const int &)>::function<main::<lambda_687776a6469914e88d18097be6c1ee5a>,void>(_Fx)”的引用
          with
          [
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>
          ]
  d:\dev\c++\jstl\test.cpp(125): note: 参见对正在编译的函数 模板 实例化“std::function<int (const int &,const int &)>::function<main::<lambda_687776a6469914e88d18097be6c1ee5a>,void>(_Fx)”的引用
          with
          [
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>
          ]
d:\dev\c++\jstl\jstl\_util.h(174): warning C4244: “参数”: 从“const double”转换到“const int”，可能丢失数据
  d:\dev\c++\jstl\jstl\_util.h(147): note: 参见对正在编译的函数 模板 实例化“bool NS_JSTL::tagDynamicArgsExtractor<const int>::_extract<const double,const int>(const std::function<RET (const __KeyType &)> &,bool,__DataType &,const double &,const int &)”的引用
          with
          [
              RET=bool,
              __KeyType=int,
              __DataType=const int
          ]
  d:\dev\c++\jstl\jstl\_util.h(147): note: 参见对正在编译的函数 模板 实例化“bool NS_JSTL::tagDynamicArgsExtractor<const int>::_extract<const double,const int>(const std::function<RET (const __KeyType &)> &,bool,__DataType &,const double &,const int &)”的引用
          with
          [
              RET=bool,
              __KeyType=int,
              __DataType=const int
          ]
  d:\dev\c++\jstl\jstl\container.h(181): note: 参见对正在编译的函数 模板 实例化“bool NS_JSTL::tagDynamicArgsExtractor<const int>::extract<const double,const int>(const std::function<RET (const __KeyType &)> &,__DataType &,const double &,const int &)”的引用
          with
          [
              RET=bool,
              __KeyType=int,
              __DataType=const int
          ]
  d:\dev\c++\jstl\jstl\container.h(179): note: 参见对正在编译的函数 模板 实例化“bool NS_JSTL::tagDynamicArgsExtractor<const int>::extract<const double,const int>(const std::function<RET (const __KeyType &)> &,__DataType &,const double &,const int &)”的引用
          with
          [
              RET=bool,
              __KeyType=int,
              __DataType=const int
          ]
  d:\dev\c++\jstl\jstl\container.h(150): note: 参见对正在编译的函数 模板 实例化“bool NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType>::extractDataTypeArgs<double,int>(const std::function<RET (const __KeyType &)> &,const int &,const double &,const int &)”的引用
          with
          [
              __DataType=int,
              __KeyType=int,
              _Kty=int,
              RET=bool
          ]
  d:\dev\c++\jstl\jstl\container.h(147): note: 参见对正在编译的函数 模板 实例化“bool NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType>::extractDataTypeArgs<double,int>(const std::function<RET (const __KeyType &)> &,const int &,const double &,const int &)”的引用
          with
          [
              __DataType=int,
              __KeyType=int,
              _Kty=int,
              RET=bool
          ]
  d:\dev\c++\jstl\jstl\jsarray.h(129): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::TD_SizeType NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType>::add<double,int>(const int &,const double &,const int &)”的引用
          with
          [
              __DataType=int,
              __KeyType=int,
              _Kty=int
          ]
  d:\dev\c++\jstl\jstl\jsarray.h(129): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::TD_SizeType NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType>::add<double,int>(const int &,const double &,const int &)”的引用
          with
          [
              __DataType=int,
              __KeyType=int,
              _Kty=int
          ]
  d:\dev\c++\jstl\test.cpp(166): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::JSArrayT<__KeyType,std::vector>::JSArrayT<double,int>(const int &,const double &,const int &)”的引用
          with
          [
              __KeyType=int
          ]
  d:\dev\c++\jstl\test.cpp(166): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::JSArrayT<__KeyType,std::vector>::JSArrayT<double,int>(const int &,const double &,const int &)”的引用
          with
          [
              __KeyType=int
          ]
d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1534): warning C4244: “参数”: 从“const int”转换到“const float”，可能丢失数据
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1534): note: 参见对正在编译的函数 模板 实例化“float std::_Invoker_functor::_Call<_Fx&,const int&,const int&>(_Callable,const int &,const int &) noexcept(false)”的引用
          with
          [
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>,
              _Callable=main::<lambda_687776a6469914e88d18097be6c1ee5a> &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1569): note: 参见对正在编译的函数 模板 实例化“float std::invoke<_Fx&,const int&,const int&>(_Callable,const int &,const int &) noexcept(false)”的引用
          with
          [
              _Fx=main::<lambda_687776a6469914e88d18097be6c1ee5a>,
              _Callable=main::<lambda_687776a6469914e88d18097be6c1ee5a> &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(211): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoker_ret<_Rx,false>::_Call<_Callable&,const int&,const int&>(_Callable &,const int &,const int &)”的引用
          with
          [
              _Rx=int,
              _Callable=_Decayed
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(211): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoker_ret<_Rx,false>::_Call<_Callable&,const int&,const int&>(_Callable &,const int &,const int &)”的引用
          with
          [
              _Rx=int,
              _Callable=_Decayed
          ]
d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1534): warning C4244: “参数”: 从“const int”转换到“float”，可能丢失数据
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1534): note: 参见对正在编译的函数 模板 实例化“float std::_Invoker_functor::_Call<_Fx&,const int&>(_Callable,const int &) noexcept(false)”的引用
          with
          [
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Callable=main::<lambda_156e9dc5c171cb1aba5700a59836a304> &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\type_traits(1569): note: 参见对正在编译的函数 模板 实例化“float std::invoke<_Fx&,const int&>(_Callable,const int &) noexcept(false)”的引用
          with
          [
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Callable=main::<lambda_156e9dc5c171cb1aba5700a59836a304> &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(211): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoker_ret<_Rx,false>::_Call<_Callable&,const int&>(_Callable &,const int &)”的引用
          with
          [
              _Rx=float,
              _Callable=_Decayed
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(211): note: 参见对正在编译的函数 模板 实例化“_Rx std::_Invoker_ret<_Rx,false>::_Call<_Callable&,const int&>(_Callable &,const int &)”的引用
          with
          [
              _Rx=float,
              _Callable=_Decayed
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(210): note: 编译 类 模板 成员函数 "float std::_Func_impl<_Decayed,_Alloc,_Ret,T>::_Do_call(const int &)" 时
          with
          [
              _Alloc=std::allocator<int>,
              _Ret=float,
              T=const int &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(136): note: 参见对正在编译的 类 模板 实例化 "std::_Func_impl<_Decayed,_Alloc,_Ret,T>" 的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ret=float,
              T=const int &
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(343): note: 参见对正在编译的 类 模板 实例化 "std::_Is_large<_Myimpl>" 的引用
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(322): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,T>::_Reset_alloc<_Ty,std::allocator<_Kty>>(_Fx &&,const _Alloc &)”的引用
          with
          [
              _Ret=float,
              T=const int &,
              _Ty=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Kty=int,
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Alloc=std::allocator<int>
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(322): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,T>::_Reset_alloc<_Ty,std::allocator<_Kty>>(_Fx &&,const _Alloc &)”的引用
          with
          [
              _Ret=float,
              T=const int &,
              _Ty=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Kty=int,
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Alloc=std::allocator<int>
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(492): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,T>::_Reset<main::<lambda_156e9dc5c171cb1aba5700a59836a304>>(_Fx &&)”的引用
          with
          [
              _Ret=float,
              T=const int &,
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\functional(492): note: 参见对正在编译的函数 模板 实例化“void std::_Func_class<_Ret,T>::_Reset<main::<lambda_156e9dc5c171cb1aba5700a59836a304>>(_Fx &&)”的引用
          with
          [
              _Ret=float,
              T=const int &,
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>
          ]
  d:\dev\c++\jstl\jstl\jsarray.h(699): note: 参见对正在编译的函数 模板 实例化“std::function<RET (T)>::function<CB,void>(_Fx)”的引用
          with
          [
              RET=float,
              T=const int &,
              CB=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>
          ]
  d:\dev\c++\jstl\jstl\jsarray.h(699): note: 参见对正在编译的函数 模板 实例化“std::function<RET (T)>::function<CB,void>(_Fx)”的引用
          with
          [
              RET=float,
              T=const int &,
              CB=main::<lambda_156e9dc5c171cb1aba5700a59836a304>,
              _Fx=main::<lambda_156e9dc5c171cb1aba5700a59836a304>
          ]
  d:\dev\c++\jstl\test.cpp(124): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::JSArrayT<float,__BaseType> NS_JSTL::JSArrayT<__KeyType,__BaseType>::map<main::<lambda_156e9dc5c171cb1aba5700a59836a304>,float>(const CB &) const”的引用
          with
          [
              __BaseType=std::vector,
              __KeyType=int,
              CB=main::<lambda_156e9dc5c171cb1aba5700a59836a304>
          ]
  d:\dev\c++\jstl\test.cpp(124): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::JSArrayT<float,__BaseType> NS_JSTL::JSArrayT<__KeyType,__BaseType>::map<main::<lambda_156e9dc5c171cb1aba5700a59836a304>,float>(const CB &) const”的引用
          with
          [
              __BaseType=std::vector,
              __KeyType=int,
              CB=main::<lambda_156e9dc5c171cb1aba5700a59836a304>
          ]
d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory0(840): warning C4244: “初始化”: 从“const float”转换到“int”，可能丢失数据
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory0(959): note: 参见对正在编译的函数 模板 实例化“void std::allocator<_Kty>::construct<_Objty,const _Ty&>(_Objty *,const _Ty &)”的引用
          with
          [
              _Kty=int,
              _Objty=int,
              _Ty=float
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory0(959): note: 参见对正在编译的函数 模板 实例化“void std::allocator<_Kty>::construct<_Objty,const _Ty&>(_Objty *,const _Ty &)”的引用
          with
          [
              _Kty=int,
              _Objty=int,
              _Ty=float
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory0(1097): note: 参见对正在编译的函数 模板 实例化“void std::allocator_traits<_Alloc>::construct<_Ty,const float&>(std::allocator<_Ty> &,_Objty *,const float &)”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ty=int,
              _Objty=int
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory0(1096): note: 参见对正在编译的函数 模板 实例化“void std::allocator_traits<_Alloc>::construct<_Ty,const float&>(std::allocator<_Ty> &,_Objty *,const float &)”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ty=int,
              _Objty=int
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory(92): note: 参见对正在编译的函数 模板 实例化“void std::_Wrap_alloc<std::allocator<_Kty>>::construct<_Ty,const float&>(_Ty *,const float &)”的引用
          with
          [
              _Kty=int,
              _Ty=int
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory(92): note: 参见对正在编译的函数 模板 实例化“void std::_Wrap_alloc<std::allocator<_Kty>>::construct<_Ty,const float&>(_Ty *,const float &)”的引用
          with
          [
              _Kty=int,
              _Ty=int
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\xmemory(126): note: 参见对正在编译的函数 模板 实例化“_FwdIt *std::_Uninitialized_copy_al_unchecked<_Iter,int*,std::allocator<_Kty>>(_InIt,_InIt,_FwdIt,std::_Wrap_alloc<std::allocator<_Kty>> &,std::_General_ptr_iterator_tag,std::_Any_tag)”的引用
          with
          [
              _FwdIt=int *,
              _Iter=const float *,
              _Kty=int,
              _InIt=const float *
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\vector(1859): note: 参见对正在编译的函数 模板 实例化“_FwdIt *std::_Uninitialized_copy<_Iter,int*,std::allocator<_Kty>>(_InIt,_InIt,_FwdIt,std::_Wrap_alloc<std::allocator<_Kty>> &)”的引用
          with
          [
              _FwdIt=int *,
              _Iter=const float *,
              _Kty=int,
              _InIt=const float *
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\vector(779): note: 参见对正在编译的函数 模板 实例化“int *std::vector<__KeyType,std::allocator<_Kty>>::_Ucopy<_Iter>(_Iter,_Iter,int *)”的引用
          with
          [
              __KeyType=int,
              _Kty=int,
              _Iter=const float *
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\vector(779): note: 参见对正在编译的函数 模板 实例化“int *std::vector<__KeyType,std::allocator<_Kty>>::_Ucopy<_Iter>(_Iter,_Iter,int *)”的引用
          with
          [
              __KeyType=int,
              _Kty=int,
              _Iter=const float *
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\vector(794): note: 参见对正在编译的函数 模板 实例化“void std::vector<__KeyType,std::allocator<_Kty>>::_Range_construct_or_tidy<const float*>(_Iter,_Iter,std::forward_iterator_tag)”的引用
          with
          [
              __KeyType=int,
              _Kty=int,
              _Iter=const float *
          ]
  d:\visual studio 2017 enterprise\vc\tools\msvc\14.10.25017\include\vector(794): note: 参见对正在编译的函数 模板 实例化“void std::vector<__KeyType,std::allocator<_Kty>>::_Range_construct_or_tidy<const float*>(_Iter,_Iter,std::forward_iterator_tag)”的引用
          with
          [
              __KeyType=int,
              _Kty=int,
              _Iter=const float *
          ]
  d:\dev\c++\jstl\jstl\container.h(235): note: 参见对正在编译的函数 模板 实例化“std::vector<__KeyType,std::allocator<_Kty>>::vector<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<float>>>,void>(_Iter,_Iter,const std::allocator<_Kty> &)”的引用
          with
          [
              __KeyType=int,
              _Kty=int,
              _Iter=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<float>>>
          ]
  d:\dev\c++\jstl\jstl\container.h(235): note: 参见对正在编译的函数 模板 实例化“std::vector<__KeyType,std::allocator<_Kty>>::vector<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<float>>>,void>(_Iter,_Iter,const std::allocator<_Kty> &)”的引用
          with
          [
              __KeyType=int,
              _Kty=int,
              _Iter=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<float>>>
          ]
  d:\dev\c++\jstl\jstl\jsarray.h(182): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType> &NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType>::assign<T>(const T &)”的引用
          with
          [
              __DataType=int,
              __KeyType=int,
              _Kty=int,
              T=NS_JSTL::JSArrayT<float,std::vector>
          ]
  d:\dev\c++\jstl\jstl\jsarray.h(182): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType> &NS_JSTL::ContainerT<__DataType,std::vector<__KeyType,std::allocator<_Kty>>,__KeyType>::assign<T>(const T &)”的引用
          with
          [
              __DataType=int,
              __KeyType=int,
              _Kty=int,
              T=NS_JSTL::JSArrayT<float,std::vector>
          ]
  d:\dev\c++\jstl\test.cpp(124): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::JSArrayT<__KeyType,std::vector> &NS_JSTL::JSArrayT<__KeyType,std::vector>::operator =<NS_JSTL::JSArrayT<float,__BaseType>>(const T &)”的引用
          with
          [
              __KeyType=int,
              __BaseType=std::vector,
              T=NS_JSTL::JSArrayT<float,std::vector>
          ]
  d:\dev\c++\jstl\test.cpp(124): note: 参见对正在编译的函数 模板 实例化“NS_JSTL::JSArrayT<__KeyType,std::vector> &NS_JSTL::JSArrayT<__KeyType,std::vector>::operator =<NS_JSTL::JSArrayT<float,__BaseType>>(const T &)”的引用
          with
          [
              __KeyType=int,
              __BaseType=std::vector,
              T=NS_JSTL::JSArrayT<float,std::vector>
          ]
  jstl.vcxproj -> D:\dev\c++\JSTL\./Debug\jstl.exe
  jstl.vcxproj -> ./Debug\jstl.pdb (Partial PDB)
